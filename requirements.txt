// Event listener for submitting the ingredients input
document.getElementById('submit-button').addEventListener('click', async () => {
    const ingredients = document.getElementById('ingredient-input').value;

    if (!ingredients.trim()) {
        alert("Please enter some ingredients.");
        return;
    }

    const list = document.getElementById('recommendations-list');
    list.innerHTML = '<li>Loading recommendations...</li>';

    try {
        const response = await fetch('/recommend', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ ingredients })
        });

        if (!response.ok) {
            throw new Error('Failed to fetch recommendations');
        }

        const recipes = await response.json();
        list.innerHTML = '';

        if (!recipes || recipes.length === 0 || recipes.message) {
            list.innerHTML = '<li>No recipes found for the given ingredients.</li>';
            return;
        }

        recipes.forEach((recipe, index) => {
            const li = document.createElement('li');
            li.textContent = `${index + 1}. ${recipe.title} (Score: ${recipe.similarity_score.toFixed(2)})`;

            // Display Image of Recipe
            if (recipe.image_name) {
                const img = document.createElement('img');
                img.src = `/image/${recipe.image_name}`;
                img.alt = recipe.title;
                img.style.maxWidth = '100px';
                li.appendChild(img);
            } else {
                li.innerHTML += '<span>No image available</span>';
            }

            li.addEventListener('click', async () => {
                try {
                    const detailsResponse = await fetch('/details', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ title: recipe.title })
                    });

                    if (!detailsResponse.ok) {
                        throw new Error('Failed to fetch recipe details');
                    }

                    const details = await detailsResponse.json();

                    // Update image
                    const imgElement = document.getElementById('recipe-image');
                    imgElement.src = `/image/${recipe.image_name}`;
                    imgElement.style.display = 'block';

                    // Format instructions without step numbers
                    const instructionsList = document.getElementById('instructions');
                    instructionsList.innerHTML = ''; // Clear existing instructions

                    if (details.steps && details.steps.length > 0) {
                        const formattedSteps = formatInstructionsWithoutSteps(details.steps);
                        formattedSteps.forEach(step => {
                            const li = document.createElement('li');
                            li.textContent = step; // Just add the step text without numbering
                            instructionsList.appendChild(li);
                        });
                    } else {
                        instructionsList.innerHTML = '<li>Instructions not available.</li>';
                    }

                    // Update calories
                    const caloriesElement = document.getElementById('calories');
                    caloriesElement.textContent = `Calories: ${details.calories || 'Not available'}`;
                } catch (error) {
                    console.error(error);
                    alert("An error occurred while fetching recipe details.");
                }
            });

            list.appendChild(li);
        });
    } catch (error) {
        console.error(error);
        alert("An error occurred while fetching recommendations.");
        list.innerHTML = '<li>Unable to load recommendations. Please try again later.</li>';
    }
});

// Function to format instructions without numbering
function formatInstructionsWithoutSteps(steps) {
    return steps.map(step => step.trim()).filter(Boolean); // Just trim and filter out empty steps
}

// Event listener for opening the camera feed when the "Open Camera" button is clicked
document.getElementById('open-camera-button').addEventListener('click', () => {
    // Hide the "Open Camera" button and show the "Capture Image" button
    document.getElementById('open-camera-button').style.display = 'none';
    document.getElementById('capture-button').style.display = 'inline-block';

    startCamera();
});

// Function to start camera and display live feed in video element
async function startCamera() {
    try {
        const stream = await navigator.mediaDevices.getUserMedia({ video: true });
        document.getElementById('camera-feed').srcObject = stream;
    } catch (error) {
        console.error('Error accessing camera: ', error);
        alert("Unable to access camera. Please check your permissions.");
    }
}

// Capture image from camera feed when the "Capture Image" button is clicked
document.getElementById('capture-button').addEventListener('click', async () => {
    const canvas = document.getElementById('canvas');
    const context = canvas.getContext('2d');
    const video = document.getElementById('camera-feed');

    // Set canvas size to match video dimensions
    canvas.width = video.videoWidth;
    canvas.height = video.videoHeight;

    // Draw the current video frame onto canvas
    context.drawImage(video, 0, 0, canvas.width, canvas.height);

    // Convert canvas to image data URL
    const imageDataUrl = canvas.toDataURL('image/png');
    
    console.log('Captured image data:', imageDataUrl); // Debugging log

    // Display loading indicator while waiting for detection results
    const recommendationsList = document.getElementById('recommendations-list');
    recommendationsList.innerHTML = '<li>Detecting ingredients... Please wait.</li>';

    // Send the image to Flask for YOLO detection
    const formData = new FormData();
    formData.append('image', dataURItoBlob(imageDataUrl)); // Convert image to blob and send

    try {
        const response = await fetch('/upload_image', {  // Ensure this matches your Flask endpoint
            method: 'POST',
            body: formData,
        });

        if (!response.ok) {
            throw new Error('Failed to process image');
        }

        const data = await response.json();

        if (data.ingredients) {
            // Populate ingredients input with detected ingredients
            document.getElementById('ingredient-input').value = data.ingredients.join(', ');

            // Display detected ingredients in recommendations list
            recommendationsList.innerHTML = '';
            data.ingredients.forEach((ingredient) => {
                const li = document.createElement('li');
                li.textContent = ingredient;
                recommendationsList.appendChild(li);
            });
        } else {
            recommendationsList.innerHTML = '<li>No ingredients detected.</li>';
        }
        
    } catch (error) {
        console.error('Error during detection:', error);
        recommendationsList.innerHTML = '<li>Error detecting ingredients. Please try again.</li>';
        
    } finally {
        // Stop camera feed after capturing an image
        const stream = video.srcObject;
        const tracks = stream.getTracks();
        tracks.forEach((track) => track.stop());
        video.srcObject = null;
    }
});

// Convert DataURI to Blob function
function dataURItoBlob(dataURI) {
    const byteString = atob(dataURI.split(',')[1]);
    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    
    const arrayBuffer = new ArrayBuffer(byteString.length);
    const uintArray = new Uint8Array(arrayBuffer);

    for (let i = 0; i < byteString.length; i++) {
        uintArray[i] = byteString.charCodeAt(i);
    }

    return new Blob([uintArray], { type: mimeString });
}
